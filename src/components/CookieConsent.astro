---
import 'vanilla-cookieconsent/dist/cookieconsent.css';
import '../styles/ccElegantBlack.css';
---
<button type="button" data-cc="show-preferencesModal">Show preferences modal</button>
<script type="module">
// Load library as a side effect and then use the global it registers.
import 'vanilla-cookieconsent';
import { config } from './CookieConsentConfig';
import { initGA, grantAnalyticsConsent } from '../ga';

// optional theme class
document.body.classList.add('cc--elegant-black');

// Ensure DOM is loaded
function initializeCookieConsent() {
  const CC = window.CookieConsent; // provided by the library
  
  if (!CC) {
    console.error('[CC] window.CookieConsent not available');
    return;
  }

  console.log('[CC] Initializing with config:', config);

  CC.run(config).then(() => {
    console.log('[CC] Successfully initialized');
    
    // show banner if there is no valid consent yet
    if (!CC.validConsent()) {
      console.log('[CC] No valid consent found, showing banner');
      CC.show(true);
    } else {
      console.log('[CC] Valid consent found');
    }

    // respect already-given analytics consent (production only)
    if (import.meta.env.PROD) {
      const prefs = CC.getUserPreferences?.() || {};
      const cats = prefs.acceptedCategories || [];
      const services = Object.values(prefs.acceptedServices || {}).flat();
      
      console.log('[CC] User preferences:', { cats, services });
      
      if (cats.includes('analytics') || services.includes('ga4')) {
        const MID = import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
        if (MID) {
          console.log('[CC] Analytics consent found, initializing GA');
          try {
            initGA(MID);
            grantAnalyticsConsent();
            
            // Small delay to ensure GA is ready
            setTimeout(() => {
              if (window.gtag) {
                window.gtag('event', 'page_view', {
                  page_location: location.href,
                  page_path: location.pathname,
                  page_title: document.title,
                });
              }
            }, 100);
          } catch (error) {
            console.error('[CC] Error initializing GA:', error);
          }
        } else {
          console.warn('[CC] No GA Measurement ID found');
        }
      }
    }
  }).catch((error) => {
    console.error('[CC] Failed to initialize:', error);
  });

  // handy debug helpers while testing
  window.ccReset = () => {
    console.log('[CC] Resetting consent');
    CC.reset(true);
  };
  window.ccShow = () => {
    console.log('[CC] Showing consent modal');
    CC.show(true);
  };
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeCookieConsent);
} else {
  initializeCookieConsent();
}
</script>